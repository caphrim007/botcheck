import syslog
import botsqlite
import sys

from ircbot import SingleServerIRCBot
from irclib import nm_to_n, nm_to_h, irc_lower, ip_numstr_to_quad, ip_quad_to_numstr
from time import sleep

class botcheck(SingleServerIRCBot):
	def __init__(self, nickname, server, port=6667):
		SingleServerIRCBot.__init__(self, [(server, port)], nickname, nickname)
		self.sqldb = botsqlite.botsqlite('bot.db')
			
		self.connection.add_global_handler("whoreply", self.who_parser)

		self.is_connected		= 0

	def on_nicknameinuse(self, connection, event):
		connection.nick(connection.get_nickname() + "_")

	def on_ping(self, connection, event):
		if self.is_connected:
			sleep(3)

			who_cmds = self.sqldb.get_the_who();

			for to_search in who_cmds:
				self.connection.who(to_search)
		else:
			self.is_connected = 1

	def who_parser(self, connection, event):
		"""
		Parse a who response from the IRC server
	
		Examples of the output generated by these
		python classes are like so

		['*', '~abbaabbaa', 'adeshnas.company.com', '*.undernet.org', 'brunetu27ek', 'H', '3 Yoda^']
		['#mylittleircbot22', '~buellerfe', 'box.company.com', '*.undernet.org', 'buellerferris', 'H', '0 buellerferris']
		"""

		arguments 	= event.arguments()

		channel		= arguments[0].replace("'","").strip()
		user		= arguments[1].replace("'","").strip()
		host		= arguments[2].replace("'","").strip()
		server		= arguments[3].replace("'","").strip()
		nick		= arguments[4].replace("'","").strip()
		other		= arguments[6].replace("'","").strip()

		self.sqldb.nick_is_exempt(nick,server)

		if (self.sqldb.nick_is_exempt(nick,server)):
			pass
		elif (self.sqldb.nick_is_exempt(nick,"all")):
			pass
		else:
			if channel == "":
				self.sqldb.add_alert(nick,"no channel",server)
				syslog_mesg = "BOTCHECK - The system "+host+" was found on "+server+" using the nickname "+nick
				syslog.syslog(syslog_mesg)
			else:
				self.sqldb.add_alert(nick,channel,server)
				syslog_mesg = "BOTCHECK - The system "+host+" was found in the channel "+channel+" on "+server+" using the nickname "+nick
				syslog.syslog(syslog_mesg)

	def on_featurelist(self, connection, event):
		features 	= event.arguments()
		has_nicklen	= False
		is_exempt	= False
		for feature in features:
			has_nicklen = feature.lower().find('nicklen')
			if has_nicklen >= 0:
				length 		= feature.split('=')[1].strip()
				new_nick	= connection.get_nickname()[0:9]
				is_exempt	= self.sqldb.nick_is_exempt(new_nick)
				if (not is_exempt):
					self.sqldb.add_exemption(new_nick, "all")
